package com.coffeecorner.app.repositories;

import android.content.Context;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.coffeecorner.app.models.CartItem;
import com.coffeecorner.app.models.Order;
import com.coffeecorner.app.network.ApiResponse;
import com.coffeecorner.app.network.ApiService;
import com.coffeecorner.app.network.RetrofitClient;
import com.coffeecorner.app.utils.PreferencesHelper;

import java.util.List;
import java.util.Date;
import java.util.Map;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 * OrderRepository - Single source of truth for order data
 * Manages order creation, history, and status updates
 */
public class OrderRepository {

    private static volatile OrderRepository instance;
    private final PreferencesHelper preferencesHelper;
    private final ApiService apiService; // Added ApiService

    private OrderRepository(Context context) {
        preferencesHelper = new PreferencesHelper(context);
        apiService = RetrofitClient.getApiService(); // Initialize ApiService
    }

    public static OrderRepository getInstance(Context context) {
        if (instance == null) {
            synchronized (OrderRepository.class) {
                if (instance == null) {
                    instance = new OrderRepository(context.getApplicationContext());
                }
            }
        }
        return instance;
    }

    /**
     * Create a new order
     *
     * @param cartItems       Items to order
     * @param total           Order total
     * @param deliveryAddress Delivery address
     * @param paymentMethod   Payment method
     * @param callback        Callback to handle result
     */
    public void createOrder(List<CartItem> cartItems, double total, String deliveryAddress,
            String paymentMethod, @NonNull OrderCallback callback) {
        String authToken = preferencesHelper.getAuthToken();
        if (authToken == null || authToken.isEmpty()) {
            callback.onError("User not logged in");
            return;
        }

        if (cartItems == null || cartItems.isEmpty()) {
            callback.onError("Cart is empty");
            return;
        } // Create new order object for the request
        Order orderRequest = new Order();
        // orderRequest.setId(UUID.randomUUID().toString()); // ID might be generated by
        // backend
        orderRequest.setItems(cartItems);
        orderRequest.setTotal(total);
        orderRequest.setDeliveryAddress(deliveryAddress);
        orderRequest.setPaymentMethod(paymentMethod);
        orderRequest.setCreatedAt(new Date()); // Timestamp might be set by backend

        // Create a Map for the request body as expected by the API
        java.util.Map<String, Object> orderData = new java.util.HashMap<>();
        orderData.put("items", cartItems); // Assuming CartItem can be serialized correctly
        orderData.put("total", total);
        orderData.put("deliveryAddress", deliveryAddress);
        orderData.put("paymentMethod", paymentMethod);
        // Add other fields if required by your backend API for order creation

        apiService.createOrder(orderData).enqueue(new Callback<ApiResponse<Order>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<Order>> call,
                    @NonNull Response<ApiResponse<Order>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    callback.onOrderCreated(response.body().getData());
                } else {
                    String errorMsg = "Failed to create order.";
                    if (response.body() != null && response.body().getMessage() != null) {
                        errorMsg = response.body().getMessage();
                    }
                    Log.e("OrderRepository", "Create order failed: " + response.code() + " - " + errorMsg);
                    callback.onError(errorMsg);
                }
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<Order>> call, @NonNull Throwable t) {
                Log.e("OrderRepository", "Create order network error", t);
                callback.onError("Network error. Please try again. " + t.getMessage());
            }
        });
    }

    /**
     * Place an order
     * 
     * @param paymentMethod   Payment method
     * @param deliveryAddress Delivery address
     * @param additionalInfo  Additional order information
     * @param callback        Callback to handle result
     */
    public void placeOrder(String paymentMethod, String deliveryAddress, Map<String, Object> additionalInfo,
            @NonNull OrderCallback callback) {
        String authToken = preferencesHelper.getAuthToken();
        if (authToken == null || authToken.isEmpty()) {
            callback.onError("User not logged in");
            return;
        }

        // Create order request with provided info
        Map<String, Object> orderData = new java.util.HashMap<>();
        orderData.put("paymentMethod", paymentMethod);
        orderData.put("deliveryAddress", deliveryAddress);

        // Add any additional info if provided
        if (additionalInfo != null) {
            orderData.putAll(additionalInfo);
        }

        apiService.createOrder(orderData).enqueue(new Callback<ApiResponse<Order>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<Order>> call,
                    @NonNull Response<ApiResponse<Order>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    callback.onOrderCreated(response.body().getData());
                } else {
                    String errorMsg = "Failed to place order";
                    if (response.body() != null && response.body().getMessage() != null) {
                        errorMsg = response.body().getMessage();
                    }
                    callback.onError(errorMsg);
                }
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<Order>> call, @NonNull Throwable t) {
                callback.onError("Network error: " + t.getMessage());
            }
        });
    }

    /**
     * Get orders for the current user
     *
     * @param callback Callback to handle result
     */
    public void getUserOrders(@NonNull OrdersCallback callback) {
        String authToken = preferencesHelper.getAuthToken();
        if (authToken == null || authToken.isEmpty()) {
            callback.onError("User not logged in");
            return;
        }

        apiService.getOrders().enqueue(new Callback<ApiResponse<List<Order>>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<List<Order>>> call,
                    @NonNull Response<ApiResponse<List<Order>>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    callback.onOrdersLoaded(response.body().getData());
                } else {
                    String errorMsg = "Failed to load orders.";
                    if (response.body() != null && response.body().getMessage() != null) {
                        errorMsg = response.body().getMessage();
                    }
                    Log.e("OrderRepository", "Get user orders failed: " + response.code() + " - " + errorMsg);
                    callback.onError(errorMsg);
                }
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<List<Order>>> call, @NonNull Throwable t) {
                Log.e("OrderRepository", "Get user orders network error", t);
                callback.onError("Network error. Please try again. " + t.getMessage());
            }
        });
    }

    /**
     * Get user's order history
     * 
     * @param callback Callback to notify completion
     * @return LiveData containing list of orders
     */
    public LiveData<List<Order>> getOrderHistory(@NonNull OrderHistoryCallback callback) {
        MutableLiveData<List<Order>> orderHistoryLiveData = new MutableLiveData<>();
        String authToken = preferencesHelper.getAuthToken();

        if (authToken == null || authToken.isEmpty()) {
            callback.onError("User not logged in");
            orderHistoryLiveData.setValue(new java.util.ArrayList<>());
            return orderHistoryLiveData;
        }

        apiService.getOrders().enqueue(new Callback<ApiResponse<List<Order>>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<List<Order>>> call,
                    @NonNull Response<ApiResponse<List<Order>>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    orderHistoryLiveData.setValue(response.body().getData());
                } else {
                    orderHistoryLiveData.setValue(new java.util.ArrayList<>());
                    Log.e("OrderRepository", "Failed to get order history: " +
                            (response.body() != null ? response.body().getMessage() : "Unknown error"));
                }
                callback.onComplete();
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<List<Order>>> call, @NonNull Throwable t) {
                orderHistoryLiveData.setValue(new java.util.ArrayList<>());
                Log.e("OrderRepository", "Network error getting order history", t);
                callback.onError("Network error: " + t.getMessage());
            }
        });

        return orderHistoryLiveData;
    }

    /**
     * Get order details by ID
     * 
     * @param orderId  Order ID
     * @param callback Callback to notify completion
     * @return LiveData containing order details
     */
    public LiveData<Order> getOrderById(String orderId, @NonNull OrderDetailCallback callback) {
        MutableLiveData<Order> orderLiveData = new MutableLiveData<>();

        if (orderId == null || orderId.isEmpty()) {
            callback.onError("Invalid order ID");
            return orderLiveData;
        }

        apiService.getOrderById(orderId).enqueue(new Callback<ApiResponse<Order>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<Order>> call,
                    @NonNull Response<ApiResponse<Order>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    orderLiveData.setValue(response.body().getData());
                } else {
                    Log.e("OrderRepository", "Failed to get order details: " +
                            (response.body() != null ? response.body().getMessage() : "Unknown error"));
                }
                callback.onComplete();
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<Order>> call, @NonNull Throwable t) {
                Log.e("OrderRepository", "Network error getting order details", t);
                callback.onError("Network error: " + t.getMessage());
            }
        });

        return orderLiveData;
    }

    /**
     * Track order status
     * 
     * @param orderId  Order ID
     * @param callback Callback to notify completion
     * @return LiveData containing order status
     */
    public LiveData<String> trackOrderStatus(String orderId, @NonNull OrderTrackingCallback callback) {
        MutableLiveData<String> statusLiveData = new MutableLiveData<>();

        if (orderId == null || orderId.isEmpty()) {
            callback.onError("Invalid order ID");
            return statusLiveData;
        }

        apiService.trackOrder(orderId).enqueue(new Callback<ApiResponse<String>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<String>> call,
                    @NonNull Response<ApiResponse<String>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    statusLiveData.setValue(response.body().getData());
                } else {
                    Log.e("OrderRepository", "Failed to track order: " +
                            (response.body() != null ? response.body().getMessage() : "Unknown error"));
                    statusLiveData.setValue("Unknown");
                }
                callback.onComplete();
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<String>> call, @NonNull Throwable t) {
                Log.e("OrderRepository", "Network error tracking order", t);
                statusLiveData.setValue("Network Error");
                callback.onError("Network error: " + t.getMessage());
            }
        });

        return statusLiveData;
    }

    /**
     * Cancel an order
     * 
     * @param orderId  Order ID
     * @param callback Callback to handle result
     */
    public void cancelOrder(String orderId, @NonNull OrderOperationCallback callback) {
        if (orderId == null || orderId.isEmpty()) {
            callback.onError("Invalid order ID");
            return;
        }

        apiService.cancelOrder(orderId).enqueue(new Callback<ApiResponse<Void>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<Void>> call,
                    @NonNull Response<ApiResponse<Void>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    callback.onSuccess("Order cancelled successfully");
                } else {
                    String errorMsg = "Failed to cancel order.";
                    if (response.body() != null && response.body().getMessage() != null) {
                        errorMsg = response.body().getMessage();
                    } else if (response.message() != null && !response.message().isEmpty()) {
                        errorMsg = response.message();
                    }
                    Log.e("OrderRepository", "Cancel order failed: " + response.code() + " - " + errorMsg);
                    callback.onError(errorMsg);
                }
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<Void>> call, @NonNull Throwable t) {
                Log.e("OrderRepository", "Cancel order network error", t);
                callback.onError("Network error. Please try again. " + t.getMessage());
            }
        });
    }

    // OrderCallback interface for createOrder, placeOrder, cancelOrder, etc.
    public interface OrderCallback {
        void onOrderCreated(Order order); // For order creation

        void onOrderLoaded(Order order); // For loading/tracking order

        void onError(String error);
    }

    // OrdersCallback for loading multiple orders
    public interface OrdersCallback {
        void onOrdersLoaded(List<Order> orders);

        void onError(String error);
    }

    // OrderHistoryCallback for order history
    public interface OrderHistoryCallback {
        void onComplete();

        void onError(String error);
    }

    // OrderDetailCallback for order details
    public interface OrderDetailCallback {
        void onComplete();

        void onError(String error);
    }

    // OrderTrackingCallback for tracking order status
    public interface OrderTrackingCallback {
        void onComplete();

        void onError(String error);
    }

    /**
     * Interface for order operations (cancel, etc.) callback
     */
    public interface OrderOperationCallback {
        void onSuccess(String message);

        void onError(String message);
    }
}
