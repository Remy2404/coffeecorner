package com.coffeecorner.app.repositories;

import android.content.Context;
import android.util.Log;

import androidx.annotation.NonNull;

import com.coffeecorner.app.models.CartItem;
import com.coffeecorner.app.models.Order;
import com.coffeecorner.app.network.ApiService;
import com.coffeecorner.app.network.RetrofitClient;
import com.coffeecorner.app.utils.PreferencesHelper;

import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 * OrderRepository - Single source of truth for order data
 * Manages order creation, history, and status updates
 */
public class OrderRepository {

    private static volatile OrderRepository instance;
    private final PreferencesHelper preferencesHelper;
    private final ApiService apiService; // Added ApiService

    private OrderRepository(Context context) {
        preferencesHelper = new PreferencesHelper(context);
        apiService = RetrofitClient.getApiService(); // Initialize ApiService
    }

    public static OrderRepository getInstance(Context context) {
        if (instance == null) {
            synchronized (OrderRepository.class) {
                if (instance == null) {
                    instance = new OrderRepository(context.getApplicationContext());
                }
            }
        }
        return instance;
    }

    /**
     * Create a new order
     *
     * @param cartItems       Items to order
     * @param total           Order total
     * @param deliveryAddress Delivery address
     * @param paymentMethod   Payment method
     * @param callback        Callback to handle result
     */
    public void createOrder(List<CartItem> cartItems, double total, String deliveryAddress,
            String paymentMethod, @NonNull OrderCallback callback) {
        String userId = preferencesHelper.getUserId();
        if (userId == null || userId.isEmpty()) {
            callback.onError("User not logged in");
            return;
        }

        if (cartItems == null || cartItems.isEmpty()) {
            callback.onError("Cart is empty");
            return;
        }

        // Create new order object for the request
        Order orderRequest = new Order();
        // orderRequest.setId(UUID.randomUUID().toString()); // ID might be generated by
        // backend
        orderRequest.setUserId(userId);
        orderRequest.setItems(cartItems);
        orderRequest.setTotal(total);
        orderRequest.setDeliveryAddress(deliveryAddress);
        orderRequest.setPaymentMethod(paymentMethod);
        // orderRequest.setStatus(Order.STATUS_CONFIRMED); // Status might be set by
        // backend
        // orderRequest.setCreatedAt(new Date()); // Timestamp might be set by backend

        apiService.createOrder(orderRequest).enqueue(new Callback<ApiResponse<Order>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<Order>> call,
                    @NonNull Response<ApiResponse<Order>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    callback.onOrderCreated(response.body().getData());
                } else {
                    String errorMsg = "Failed to create order.";
                    if (response.body() != null && response.body().getMessage() != null) {
                        errorMsg = response.body().getMessage();
                    }
                    Log.e("OrderRepository", "Create order failed: " + response.code() + " - " + errorMsg);
                    callback.onError(errorMsg);
                }
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<Order>> call, @NonNull Throwable t) {
                Log.e("OrderRepository", "Create order network error", t);
                callback.onError("Network error. Please try again. " + t.getMessage());
            }
        });
    }

    /**
     * Get orders for the current user
     *
     * @param callback Callback to handle result
     */
    public void getUserOrders(String userId, @NonNull OrdersCallback callback) {
        if (userId == null || userId.isEmpty()) {
            callback.onError("User not logged in");
            return;
        }

        apiService.getUserOrders(userId).enqueue(new Callback<ApiResponse<List<Order>>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<List<Order>>> call,
                    @NonNull Response<ApiResponse<List<Order>>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    callback.onOrdersLoaded(response.body().getData());
                } else {
                    String errorMsg = "Failed to load orders.";
                    if (response.body() != null && response.body().getMessage() != null) {
                        errorMsg = response.body().getMessage();
                    }
                    Log.e("OrderRepository", "Get user orders failed: " + response.code() + " - " + errorMsg);
                    callback.onError(errorMsg);
                }
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<List<Order>>> call, @NonNull Throwable t) {
                Log.e("OrderRepository", "Get user orders network error", t);
                callback.onError("Network error. Please try again. " + t.getMessage());
            }
        });
    }

    /**
     * Get an order by ID
     *
     * @param orderId  Order ID
     * @param callback Callback to handle result
     */
    public void getOrderById(String orderId, @NonNull OrderCallback callback) {
        // String userId = preferencesHelper.getUserId(); // May not be needed if
        // endpoint is just /orders/{orderId}
        // if (userId == null || userId.isEmpty()) {
        // callback.onError("User not logged in");
        // return;
        // }
        if (orderId == null || orderId.isEmpty()) {
            callback.onError("Order ID cannot be null or empty.");
            return;
        }

        apiService.getOrderDetails(orderId).enqueue(new Callback<ApiResponse<Order>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<Order>> call,
                    @NonNull Response<ApiResponse<Order>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    callback.onOrderLoaded(response.body().getData());
                } else {
                    String errorMsg = "Failed to load order details.";
                    if (response.body() != null && response.body().getMessage() != null) {
                        errorMsg = response.body().getMessage();
                    }
                    Log.e("OrderRepository", "Get order by ID failed: " + response.code() + " - " + errorMsg);
                    callback.onError(errorMsg);
                }
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<Order>> call, @NonNull Throwable t) {
                Log.e("OrderRepository", "Get order by ID network error", t);
                callback.onError("Network error. Please try again. " + t.getMessage());
            }
        });
    }

    /**
     * Cancel an order
     *
     * @param orderId  Order ID
     * @param callback Callback to handle result
     */
    public void cancelOrder(String orderId, @NonNull OrderCallback callback) {
        String userId = preferencesHelper.getUserId();
        if (userId == null || userId.isEmpty()) {
            callback.onError("User not logged in. Cannot cancel order.");
            return;
        }
        if (orderId == null || orderId.isEmpty()) {
            callback.onError("Order ID cannot be null or empty.");
            return;
        }

        // The API might handle authorization and whether an order can be cancelled.
        // If specific client-side checks are still needed (e.g. based on order status
        // before API call),
        // you might fetch the order first, check, then call cancel.
        // However, a direct cancel call is often preferred for atomicity.

        apiService.cancelOrder(orderId).enqueue(new Callback<ApiResponse<Order>>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse<Order>> call,
                    @NonNull Response<ApiResponse<Order>> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    // Check if the status is indeed cancelled, or if the API handles this
                    // Assuming the API returns the updated order object upon successful
                    // cancellation
                    callback.onOrderLoaded(response.body().getData());
                } else {
                    String errorMsg = "Failed to cancel order.";
                    if (response.body() != null && response.body().getMessage() != null) {
                        errorMsg = response.body().getMessage();
                    }
                    Log.e("OrderRepository", "Cancel order failed: " + response.code() + " - " + errorMsg);
                    callback.onError(errorMsg);
                }
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse<Order>> call, @NonNull Throwable t) {
                Log.e("OrderRepository", "Cancel order network error", t);
                callback.onError("Network error. Please try again. " + t.getMessage());
            }
        });
    }

    /**
     * Interface for order creation and single order load callbacks
     */
    public interface OrderCallback {
        void onOrderCreated(Order order);

        void onOrderLoaded(Order order);

        void onError(String errorMessage);
    }

    /**
     * Interface for multiple orders load callbacks
     */
    public interface OrdersCallback {
        void onOrdersLoaded(List<Order> orders);

        void onError(String errorMessage);
    }
}
